<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="icon" href="images/favicon.png" type = "image/x-icon">

  <title>WriCreate Game</title>
  <!-- Paper CSS stylesheet -->
  <link rel="stylesheet" href="https://unpkg.com/papercss@1.8.2/dist/paper.min.css">
  <link rel="stylesheet" href="gamestyle.css">

  <!-- FA CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.2/css/all.css" rel="stylesheet">
</head>
<body>


<!-- Navbar -->
  <nav class="border fixed split-nav">
    <div class="nav-brand">
       <a href="#"><img src="images/logo (2).png" style="height:53px"/></a>
    </div>
    <div class="collapsible">
      <input id="collapsible1" type="checkbox" name="collapsible1">
      <label for="collapsible1">
        <div class="bar1"></div>
        <div class="bar2"></div>
        <div class="bar3"></div>
      </label>
      <div class="collapsible-body">
        <ul class="inline">
          <li><a href="#prompt">Home</a></li>
          <li><a href="https://github.com/Swatilekha-Roy/WriCreate"><i class="fab fa-github" style="font-size: 40px"></i></a></li>
        </ul>
      </div>
    </div>
  
    <!-- Lights -->
    <ul class="lightrope">
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
    </ul>
  </nav>



  <!--Word Game-->
      <div class="heading" style="margin-left: 5%; margin-top: 8%;" >
        <h2>Build your story in a... "unique" way as you go...</h2>
        <p>(And await a surprise below!)</p>
      </div>
      


        <div class="row flex-center game-div">
          <div class="sm-4 col">
            <p>
              Once upon a time there was a <input type="text" id="noun1" style="background-color: #d4cfd0;">
            </p>
            <!--<button class="btn-small">Go!</button>-->
          </div>
        </div>







        <div class="row flex-center game-div" >
          <div class="sm-8 col">
            <p>
              One fine day, it collided with a breadstick and became a rabbit with _______
            </p>
            
            <fieldset class="form-group rates" style="margin-top: 2%;">
              <label for="paperRadios1" class="paper-radio">
                <input type="radio" name="paperRadios" id="paperRadios1" value="no whiskers"> <span>no whiskers</span>
              </label>
              <label for="paperRadios2" class="paper-radio">
                <input type="radio" name="paperRadios" id="paperRadios2" value="a rough temperament"> <span>a rough temperament</span>
              </label>
              <label for="paperRadios3" class="paper-radio">
                <input type="radio" name="paperRadios" id="paperRadios3" value="no teeth"> <span>no teeth</span>
              </label>
              <label for="paperRadios4" class="paper-radio">
                <input type="radio" name="paperRadios" id="paperRadios4" value="sweet teeth"> <span>sweet teeth</span>
              </label>
            </fieldset>

            <button class="btn-small" onclick="getInput()">Click!</button>
            
          </div>

          <
        </div>

        

        <div class="row flex-center game-div">
          <div class="sm-4 col">
            <p>
              Now, it loves sleeping and doing 
            </p><span><p id="voiceresult"></p>
            <main>
            <div id="result"></div>
            <button id="button" class="btn-small">Start listening</button>
            <p id="message" hidden aria-hidden="true">
            Your browser doesn't support Speech Recognition. Sorry.
            </p>
            <!--<button id="checker" class="btn-small">Submit</button>-->
            </div>
           </main>
            
          </div>
        </div>

        <div class="row flex-center game-div">
          <div class="sm-8 col">
            <p>
              On some nights, it dreams of becoming the first <p id="noun3" style="background-color: #ccc6c7;"></p>
            </p>
            <div>
            <img src="./images/Poseguide.png" class="poseguide">
            <canvas id="canvas"></canvas></div>
            <div id="label-container"></div>
            <p>A. President </br> B. Murderer</br> C. Champion <br> D. Human-Hybrid</p>
            <button class="btn-small" onclick="init()">Go!</button>
          </div>
        </div>



      <div style="margin-left: 3%;">
        <p id="output"></p>
        <button onclick="getInput()">Click</button>
        <script src="script.js"></script>
        <br><br>
        Select Voice: <select id='voiceList'></select> <br><br>
        

        <!-- <input id='txtInput' /> <br><br>     -->
        <button id='btnSpeak'>Speak!</button>
      </div>



  <!-- Footer -->
<div class="footer-con row flex-top flex-center" style="margin-top: 5%;">
  <div class="col-12">
    <footer class="border shadow">
      <p style="margin-left: 3%">Made with <i class="fas fa-heart"></i> by WriCreate.
      <!--<div class="row flex-right">

        <div class="sm-4 col"><a href="https://github.com/Swatilekha-Roy/WriCreate" style="text-decoration: none !important;"><i class="fab fa-github" style="font-size: 40px"></i></a></div>
      </div>-->
    </footer>
  </div>
</div>


          <script>
            var noun1, adjective1, noun2, storyOutput;


             

      function getInput(){
        adjective1 = document.querySelector('input[name="paperRadios"]:checked').value;
        console.log(adjective1);
        noun3 = "Murderer";

        noun1 = document.getElementById("noun1").value;
        noun2 = document.getElementById("result").textContent;
        noun3 = document.getElementById("noun3").textContent;

        storyOutput = ("Once upon a time there was a " + noun1 + ". One fine day, it collided with a breadstick and became a rabbit with " + adjective1 + ". Now, it loves sleeping and doing  " + noun2 + ". On some nights, it dreams of becoming the first " + noun3);

        document.getElementById("output").innerHTML = storyOutput;
      }
        
        var voiceList = document.querySelector('#voiceList');
        var btnSpeak = document.querySelector('#btnSpeak');
        var synth = window.speechSynthesis;
        var voices = [];

        PopulateVoices();
        if(speechSynthesis !== undefined){
            speechSynthesis.onvoiceschanged = PopulateVoices;
        }

        btnSpeak.addEventListener('click', ()=> {
            var toSpeak = new SpeechSynthesisUtterance(storyOutput);
            var selectedVoiceName = voiceList.selectedOptions[0].getAttribute('data-name');
            voices.forEach((voice)=>{
                if(voice.name === selectedVoiceName){
                    toSpeak.voice = voice;
                }
            });
            synth.speak(toSpeak);
        });

        function PopulateVoices(){
            voices = synth.getVoices();
            var selectedIndex = voiceList.selectedIndex < 0 ? 0 : voiceList.selectedIndex;
            voiceList.innerHTML = '';
            voices.forEach((voice)=>{
                var listItem = document.createElement('option');
                listItem.textContent = voice.name;
                listItem.setAttribute('data-lang', voice.lang);
                listItem.setAttribute('data-name', voice.name);
                voiceList.appendChild(listItem);
            });

            voiceList.selectedIndex = selectedIndex;
        }
    </script>
    <!-- Custom script -->
    <script type="text/javascript" src="script.js"></script>

    <!-- Pose Camera Script -->
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/pose@0.8/dist/teachablemachine-pose.min.js"></script>
<script type="text/javascript">
    const URL = "https://teachablemachine.withgoogle.com/models/cWwiVmGuS/";
    let model, webcam, ctx, labelContainer, maxPredictions;

    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // Note: the pose library adds a tmPose object to your window (window.tmPose)
        model = await tmPose.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const size = 200;
        const flip = true; // whether to flip the webcam
        webcam = new tmPose.Webcam(size, size, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append/get elements to the DOM
        const canvas = document.getElementById("canvas");
        canvas.width = size; canvas.height = size;
        ctx = canvas.getContext("2d");
        labelContainer = document.getElementById("label-container");
        for (let i = 0; i < maxPredictions; i++) { // and class labels
            labelContainer.appendChild(document.createElement("div"));
        }
    }

    async function loop(timestamp) {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
    }

    async function predict() {
        // Prediction #1: run input through posenet
        // estimatePose can take in an image, video or canvas html element
        const { pose, posenetOutput } = await model.estimatePose(webcam.canvas);
        // Prediction 2: run input through teachable machine classification model
        const prediction = await model.predict(posenetOutput);

        for (let i = 0; i < maxPredictions; i++) {
            const classPrediction =
                prediction[i].className + ": " + prediction[i].probability.toFixed(2);
            labelContainer.childNodes[i].innerHTML = classPrediction;

            //edit here

            if (prediction[1].probability.toFixed(2) > 0.90) {
             document.getElementById("noun2").innerHTML = "President";
            }

            if (prediction[2].probability.toFixed(2) > 0.90) {
             document.getElementById("noun2").innerHTML = "Murderer";
            }

            if (prediction[3].probability.toFixed(2) > 0.90) {
             document.getElementById("noun2").innerHTML = "Champion";
            }

            if (prediction[4].probability.toFixed(2) > 0.80) {
            document.getElementById("noun2").innerHTML = "Human-Hybrid";
            }
        }


        // finally draw the poses
        drawPose(pose);
    }

    function drawPose(pose) {
        if (webcam.canvas) {
            ctx.drawImage(webcam.canvas, 0, 0);
            // draw the keypoints and skeleton
            if (pose) {
                const minPartConfidence = 0.5;
                tmPose.drawKeypoints(pose.keypoints, minPartConfidence, ctx);
                tmPose.drawSkeleton(pose.keypoints, minPartConfidence, ctx);
            }
        }
    }

    //Start the voice detection stuff
    window.addEventListener("DOMContentLoaded", () => {
        const button = document.getElementById("button");
        const result = document.getElementById("result");
        const main = document.getElementsByTagName("main")[0];
        let listening = false;
        const SpeechRecognition =
          window.SpeechRecognition || window.webkitSpeechRecognition;
        if (typeof SpeechRecognition !== "undefined") {
          const recognition = new SpeechRecognition();

          const stop = () => {
            main.classList.remove("speaking");
            recognition.stop();
            button.textContent = "Start listening";
          };

          const start = () => {
            main.classList.add("speaking");
            recognition.start();
            button.textContent = "Stop listening";
          };

          const onResult = event => {
            result.innerHTML = "";
            for (const res of event.results) {
              const text = document.createTextNode(res[0].transcript);
              const p = document.createElement("p");
              p.id = 'speechResult'
              if (res.isFinal) {
                p.classList.add("final");
              }
              p.appendChild(text);
              result.appendChild(p);
            }
          };
          recognition.continuous = true;
          recognition.interimResults = true;
          recognition.addEventListener("result", onResult);
          button.addEventListener("click", event => {
            listening ? stop() : start();
            listening = !listening;
          });
        } else {
          button.remove();
          const message = document.getElementById("message");
          message.removeAttribute("hidden");
          message.setAttribute("aria-hidden", "false");
        }
      });
    
</script>
  </body>
</html>

   <!--End of Madlib--> 